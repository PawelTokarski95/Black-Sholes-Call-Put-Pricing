#include <fstream>
#include <iostream>
#include <random>
#include <vector>
#include <sstream>
#include <string>
#include <cmath>

using namespace std;


vector<double> Wiener(int period = 100) {
    random_device rd;
    mt19937 rng(rd());
    normal_distribution<double> distribution(0.0, 1.0);
    vector<double> wiener;

    for (int i = 0; i < period; i++) {

        double x = distribution(rng);
        wiener.push_back(x);


    }


    return wiener;
}


struct ticker {

    string date;
    double open;
    double high;
    double low;
    double close;
    double volume;

};

double Rate_of_return(const vector<ticker>& XOM) {

    vector<double> ror;
    double sum_ror = 0.0;

    for (size_t i = 1; i < XOM.size(); ++i) {
        double r = log(XOM[i].close / XOM[i - 1].close);
        ror.push_back(r);
        sum_ror += r;
    }
    double avg_ror = sum_ror / ror.size();

    return avg_ror;

}

double Volatility(const vector<ticker>& XOM) {
    vector<double> ror;
    double avg_ror = Rate_of_return(XOM);

    for (size_t i = 1; i < XOM.size(); ++i) {
        if (XOM[i - 1].close <= 0 || XOM[i].close <= 0) continue;
        double r = log(XOM[i].close / XOM[i - 1].close);
        if (!isfinite(r)) continue;
        ror.push_back(r);
    }

    if (ror.size() < 2) return 0.0;

    double sum_squared_diff = 0.0;
    for (double r : ror) {
        sum_squared_diff += pow(r - avg_ror, 2);
    }

    return sqrt(sum_squared_diff / (ror.size() - 1));
}


vector<double> Markov_chains(const vector<ticker>& XOM) {
    vector<double> noise = Wiener(100);
    vector<double> S;

    double S0 = XOM.back().close;
    double mu = Rate_of_return(XOM);
    double sigma = Volatility(XOM);
    double dt = 1.0 / 252.0;

    S.push_back(S0);
    for (size_t i = 1; i < noise.size(); ++i) {
        double prev = S.back();
        double next = prev * exp((mu - 0.5 * sigma * sigma) * dt + sigma * sqrt(dt) * noise[i]);
        S.push_back(next);
    }

    return S;
}

double cdf(double x) {
    return 0.5 * erfc(-x / sqrt(2));
}

double black_scholes_call(double S, double K, double T, double r, double sigma) {

    double d1 = (log(S / K) + (r + 0.5 * sigma * sigma) * T) / (sigma * sqrt(T));
    double d2 = d1 - sigma * sqrt(T);
    double Price = S*cdf(d1) - K*exp(-r*T)*cdf(d2);
    return Price;
}

double black_scholes_put(double S, double K, double T, double r, double sigma) {

    double d1 = (log(S / K) + (r + 0.5 * sigma * sigma) * T) / (sigma * sqrt(T));
    double d2 = d1 - sigma * sqrt(T);
    double Price = K * exp(-r * T) * cdf(-d2) - S * cdf(-d1);
    return Price;
}



// TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
int main() {
    ifstream stock("C:/Users/.........../XOM.csv");

    string stock_line;
    getline(stock, stock_line);
    vector<double> stock_price;


    vector<ticker> XOM;



    while (getline(stock, stock_line)) {
        stringstream ss(stock_line);
        string date;
        string t_open, t_high, t_low, t_close, t_volume;
        getline(ss, date, ';');
        getline(ss, t_open, ';');
        getline(ss, t_high, ';');
        getline(ss, t_low, ';');
        getline(ss, t_close, ';');
        getline(ss, t_volume, ';');

        ticker o{date, stod(t_open), stod(t_high), stod(t_low), stod(t_close), stod(t_volume)};
        XOM.push_back(o);




    }


    vector<double> S_chains = Markov_chains(XOM);
    double K = 110.0;
    double T = 0.5;
    double r = 0.03;
    double sigma = Volatility(XOM);

    vector<double> call_trajectory;
    vector<double> put_trajectory;

    for (double S_t : S_chains) {
        double call_price = black_scholes_call(S_t, K, T, r, sigma);
        double put_price  = black_scholes_put(S_t, K, T, r, sigma);
        call_trajectory.push_back(call_price);
        put_trajectory.push_back(put_price);
    }

    ofstream out("Trajectories.csv");
    out << "Index,Markov_price,Call_Price,Put_Price\n";
    for (size_t i = 0; i < S_chains.size(); ++i) {
        out << i << "," << S_chains[i] << "," << call_trajectory[i] << "," << put_trajectory[i] << "\n";
    }
    out.close();

    return 0;
}




